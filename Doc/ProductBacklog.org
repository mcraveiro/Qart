#+title: Product Backlog
#+options: date:nil toc:nil author:nil num:nil
#+tags: { reviewing(r) }
#+tags: { story(s) epic(e) }

* Stories

This document contains the [[http://www.mountaingoatsoftware.com/agile/scrum/product-backlog][product backlog]] for Qart.

** To be worked on soon

*** Actions should support parameters                                 :story:

At present there is no way to supply additional parameters to
actions. We need to implement this to support two use cases:

URL style notation:

: MyProcessor {
:      "actions" : [
:          "an_action",          => no parameters
:          "another_action?param1=/a/b&param2=abc
: ...

JSON style notation:

: MyProcessor {
:        "actions" : [
:            "an_action",
:            "another_action" {
:                "param1" : "/a/b",
:                "param2" : "abc",
: ...
We need to support both of these forms.

*** Add Rebaseline to Test Case Context                               :story:

Propagate the command line flag into the context.

*** Split workflow from testing in Qart.Testing                       :story:
*** Add help to CyberTester describing all available actions          :story:

When an action is registered it must register a description which is
used to produce the help text. Must document inputs and outputs.

Same with processor.

*** Rename manual to cookbook                                         :story:

This is not an exhaustive manual, just a quick started guide.

*** Add examples to manual                                            :story:

Document =Qart.Wheels.TestAutomation= as an example in manual.

*** Consider splitting inputs from outputs in test                    :story:

FIXME: deferred.

Create a folder for expectations: =expected=, =exp=, =assets=

Different kinds of data:

- actions:
  - action instance (meta-data, .test)
  - |

- meta-data: .test,
- data: inputs

*** Merge .transform with .test                                       :story:

Put all the arguments into .test (remove .ref, .transform,
.exclude.xpath) as arguments to the action.

*** Document .ref and .transform behaviours                           :story:

Manual needs to cover these.

*** Consider not having empty names with .extensions                  :story:

In UNIX (Linux, OSX), =.= is considered hidden. This makes it harder
to look at test cases.

*** =TestCaseContext= should have Qart specific information           :story:

These should be made available to the running test case:

- =TestSession=
- =TestCase=: a bit recursive?
- =Description=: for when we are building a description dynamically,
  adding values to keys;
- =Logger=

*** Consider changing the structure of .test file to make processor more obvious :epic:

The test description files start with a processor id, e.g.:

: MyProcessor { "a" : "b" }

This means we are calling =MyProcessor= and it understands parameter
=a= with a value of =b=. However, this is not obvious to a user. We
should look to see if there are more obvious ways to express this.

*** Consider merging description into =.test= file                    :story:

At present it is not obvious to users what exactly a test does. Even
when using the pipeline processor one can only see what the steps are,
not what their meaning is. For example, say a set of actions such as
("list files", "upload file", "remove file", "list files") do not tell
us anything about intent; a description such as "Given a new file,
when removing it the file is no longer part of the list of files"
would make the test case description much more readable.

*** .Test definiton file should support arbitrary tags                :story:

Add some JSON arguments for tagging tests.

*** Fix link to Contributing in Readme.                               :story:

Link is broken.

*** Semi-colon as a separator causes problems for some shells         :story:

At present Qart uses the semi-colon as a separator for supplying
key-value pairs:

: Qart.CybertTest.exe -o a=b;c=d

In powershell and bash, semi-colon is used as a command separator and
so this results in errors such as c command not found, or the setting
of c as a variable. At present we can only run Qart.CyberTester by
escaping the commands. We should consider changing the separator to :,
which shouldn't cause problems to these two shells. We could perhaps
support both separators.

*** Add support for token replacement                                 :story:

It would be good to have some machinery to replace given tokens in XML
and JSON files. Ideally it should also support post-processing such as
moving dates forward in time, etc.

** Longer term

*** Add a test case discoverer                                         :epic:

We should have a way to allow the user to supply user defined .test
files and to supply parsers for those files. We also need to add a
processor factory.
