#+title: Sprint Backlog 01
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) epic(e) }

* Mission Statement

- finish implementing Qart.Wheels

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+CAPTION: Clock summary at [2016-08-02 Tue 11:39]
| <75>                                                                        |        |      |      |       |
| Headline                                                                    | Time   |      |      |     % |
|-----------------------------------------------------------------------------+--------+------+------+-------|
| *Total time*                                                                | *6:46* |      |      | 100.0 |
|-----------------------------------------------------------------------------+--------+------+------+-------|
| Stories                                                                     | 6:46   |      |      | 100.0 |
| Active                                                                      |        | 6:46 |      | 100.0 |
| STARTED Sprint and product backlog grooming                                 |        |      | 1:11 |  17.5 |
| COMPLETED Sort out mess with git branches                                   |        |      | 0:25 |   6.2 |
| COMPLETED Qart.CybyberTester does not honour =-h=                           |        |      | 0:36 |   8.9 |
| COMPLETED Qart.CybyberTester throws on empty directory                      |        |      | 0:25 |   6.2 |
| STARTED Add endpoints to Qart.Wheels                                        |        |      | 2:21 |  34.7 |
| STARTED Add support for test case discovery to Qart                         |        |      | 1:34 |  23.2 |
| STARTED Update appveyor configuration                                       |        |      | 0:14 |   3.4 |
#+TBLFM: $5='(org-clock-time% @3$2 $2..$4);%.1f
#+end:

*** STARTED Sprint and product backlog grooming                       :story:
    CLOCK: [2016-08-01 Mon 11:37]--[2016-08-01 Mon 11:43] =>  0:06
    CLOCK: [2016-08-01 Mon 10:20]--[2016-08-01 Mon 10:24] =>  0:04
    CLOCK: [2016-07-28 Thu 16:12]--[2016-07-28 Thu 17:13] =>  1:01

Updates to sprint and product backlog.

*** COMPLETED Sort out mess with git branches                         :story:
    CLOSED: [2016-08-01 Mon 10:18]
    CLOCK: [2016-08-01 Mon 09:40]--[2016-08-01 Mon 10:05] =>  0:25

We pushed to our master stuff that didn't get submitted as a PR. This
caused conflicts when pulling from upstream. The branching strategy is
now as follows:

- master is always a clean copy of upstream/master.
- remote integration branch contains all the work. We don't need
  feature branches yet since we are working on one feature at a
  time. If/when we work on more than one feature we can open separate
  branches.
- remote integration branch is rebased as we update master from
  upstream.
- PRs are opened from integration.

*** COMPLETED Qart.CybyberTester does not honour =-h=                 :story:
    CLOSED: [2016-08-02 Tue 11:12]
    CLOCK: [2016-08-02 Tue 10:36]--[2016-08-02 Tue 11:12] =>  0:36

At present if you ask Qart for help, nothing happens:

: $ ./Qart.CyberTester.exe --help
: 02/08/2016 10:31:33 [DEBUG]  - Rebaseline [False], TestCases [/home/marco/Development/DomainDrivenConsulting/Qart/Src/Qart.CyberTester/bin/Release]
: 02/08/2016 10:31:33 [INFO]   - Tests execution finished. Number of failed testcases: 0

In reality Qart is ignoring the request for help and trying to look
for tests to execute. Display help instead and do not log.

*** COMPLETED Qart.CybyberTester throws on empty directory            :story:
    CLOSED: [2016-08-02 Tue 11:39]
    CLOCK: [2016-08-02 Tue 11:35]--[2016-08-02 Tue 11:39] =>  0:04
    CLOCK: [2016-08-02 Tue 11:13]--[2016-08-02 Tue 11:34] =>  0:21

At present when we run Qart.CybyberTester without any parameters on a
directory without any tests we get an exception:

: 02/08/2016 11:09:16 [DEBUG]  - Rebaseline [False], TestCases [/home/marco/Development/DomainDrivenConsulting/Qart/Src/Qart.CyberTester/bin/Release]
: 02/08/2016 11:09:17 [DEBUG]  - Starting processing test case [.]
: 02/08/2016 11:09:17 [ERROR]  - an error occured
: =======================================================(inner most exception)===
:  (1) System.NullReferenceException
: ================================================================================
: Method        :  Execute
: Type          :  Qart.Testing.Framework.TestCaseProcessorInfoExtractor
: Assembly      :  Qart.Testing, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
: Assembly Path :  /home/marco/Development/DomainDrivenConsulting/Qart/Src/Qart.CyberTester/bin/Release/Qart.Testing.dll
: Source        :  Qart.Testing
: Thread        :  1 ''
: Helplink      :

This happens because of this line:

: var content = testCase.GetContent(".test").TrimStart();

We need to handle the case where there are no =.test= files. It
appears this is a regression due to this expression:

:        public IEnumerable<string> GetTestCaseIds()
:        {
:            return DataStorage.GetAllGroups().Concat(new[] { "." }).Where(_ => _isTestCasePredicate(new ScopedDataStore(DataStorage, _)) != null);
:        }

The problem is:

: != null

*** STARTED Add endpoints to Qart.Wheels                              :story:
    CLOCK: [2016-08-01 Mon 10:25]--[2016-08-01 Mon 11:36] =>  1:11
    CLOCK: [2016-08-01 Mon 09:01]--[2016-08-01 Mon 09:39] =>  0:38
    CLOCK: [2016-07-28 Thu 17:14]--[2016-07-28 Thu 17:46] =>  0:32

Useful endpoints:

- list all test cases with descriptions: =TestCases/list?dir=/a/b=
- run test cases: with argument of starting point:

: TestCases/execute?dir=/a/b&options=a=b;c=d

- ability to supply options as argument: these are just regular
  parameters in URL.

The biggest question we have is how will the hosted environment get
access to the test definitions. We have several options:

- to start off with we could simply hack it and use a relative path
  from the Qart.Wheels binary. This is sufficient to get started.
- next we could consider some form of "test submission": the user
  could post a request with a zip file containing the test cases. The
  problem with this is that the processor would not be present. We
  could perhaps have two zips: processors and test cases. The system
  would unpack these into well known directories and then run the
  tests from the supplied entry point. The zipped file could be
  accessed via some kind of zipped data store.
- the final stage would be to allow the user to supply a git repo
  location and have the system git clone the repo and run the tests
  from there. Users could also supply a commit id. The git repo would
  be accessed by a git data store.
- We have a problem when it comes to providing feedback on
  execution. We

Simple example of adding endpoints to OWIN available here:

[[http://www.asp.net/web-api/overview/hosting-aspnet-web-api/use-owin-to-self-host-web-api][Use OWIN to Self-Host ASP.NET Web API 2]]

*** STARTED Add support for test case discovery to Qart               :story:
    CLOCK: [2016-08-02 Tue 10:18]--[2016-08-02 Tue 10:35] =>  0:17
    CLOCK: [2016-08-02 Tue 10:01]--[2016-08-02 Tue 10:17] =>  0:16
    CLOCK: [2016-08-01 Mon 12:43]--[2016-08-01 Mon 12:46] =>  0:03
    CLOCK: [2016-08-01 Mon 11:44]--[2016-08-01 Mon 12:42] =>  0:58

In order to list test cases we need to split the running from the
discovery. Tasks:

- Rename CyberTester to just Tester in Qart.Testing. CyberTester is
  just the command line utility from now on.
- In Tester, create a method to discover test cases. Implement
  =RunTests= in terms of this new method.
- Add support for "automatic" tags. These are obtained from the
  filesystem: parent folder names up to the initial entry point.
- Add command line option to CyberTester to list all tests.

*** Add support for "manual" tags                                     :story:

Users should be able to assign arbitrary tags to tests. We could
support a =.tags= file, added to each test case. The contents of that
file are then read and assigned to the test case. We should support
=.ref= as well.

*** Add support to run tests by "tags"                                :story:

Once we have tagging support (automatic  and/or manual) we should be
able to run tests by tags. We need:

- a command line option for the user to supply the tags;
- filtering based on the tags supplied. This should be done during
  test discovery.

*** Create aliasing shell scripts                                     :story:

Its a bit painful to type Qart.CyberTester.exe to run tests. We should
supply some simple scripts that alias it to =ct=. This could be in
CMD, bash, Powershell.

*** STARTED Update appveyor configuration                             :story:
    CLOCK: [2016-08-01 Mon 10:05]--[2016-08-01 Mon 10:19] =>  0:14

Copy across some of the lessons learned from Dogen. For example, we
should only build master.

: branches:
:    only:
:        - master
:
: clone_depth: 5

*** Consider renaming =-d= (directory) to location                    :story:

Directory is specific to the file system. If we have tests stored
elsewhere like say a database then it would not make sense. Location
is sufficiently generic that we could use for other resource types.

*** Implement Qart.Wheels Automation using Pipeline processor         :story:

Now that we have a pipeline processor we need to make use of it to
test Qart.Wheels.

*** Add support for Test Case description                             :story:

Tests at present do not have a human-readable description associated
with them. We should create a new file type =.description= that when
present gets read and populates a property in the test case
=Description=. The description file should be a JSON object with
KVPs. Some of these will be well-known keys (such as perhaps
"description" or maybe "summary") others can be user defined and used
only in the user specific processors.

*** Remove test app                                                   :story:

Once Qart.Wheels is done we don't need it.
